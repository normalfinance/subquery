# To improve query performance, we strongly suggest adding indexes to any field that you plan to filter or sort by
# Add the `@index` or `@index(unique: true)` annotation after any non-key field
# https://academy.subquery.network/build/graphql.html#indexing-by-non-primary-key-field

#   ______    ______    _____  ___  ___________  _______        __       ______  ___________  ________
#  /" _  "\  /    " \  (\"   \|"  \("     _   ")/"      \      /""\     /" _  "\("     _   ")/"       )
# (: ( \___)// ____  \ |.\\   \    |)__/  \\__/|:        |    /    \   (: ( \___))__/  \\__/(:   \___/
#  \/ \    /  /    ) :)|: \.   \\  |   \\_ /   |_____/   )   /' /\  \   \/ \        \\_ /    \___  \
#  //  \ _(: (____/ // |.  \    \. |   |.  |    //      /   //  __'  \  //  \ _     |.  |     __/  \\
# (:   _) \\        /  |    \    \ |   \:  |   |:  __   \  /   /  \\  \(:   _) \    \:  |    /" \   :)
#  \_______)\"_____/    \___|\____\)    \__|   |__|  \___)(___/    \___)\_______)    \__|   (_______/

"""
Pool entity: Stores pool data and current reserves
"""
type Pool @entity {
  id: ID!
  idx: String!
  ledger: Int! @index
  date: Date! @index
  tokenA: String! @index
  tokenB: String! @index
  reserveA: BigInt!
  reserveB: BigInt!
  fee: BigInt!
}

"""
InsuranceFund entity: Stores pool data and current reserves
"""
type InsuranceFund @entity {
  id: ID!
  idx: String!
  ledger: Int! @index
  date: Date! @index
  token: String! @index
  totalShares: BigInt!
  baseRate: BigInt!
}

#   _______  ___      ___  _______  _____  ___  ___________  ________
#  /"     "||"  \    /"  |/"     "|(\"   \|"  \("     _   ")/"       )
# (: ______) \   \  //  /(: ______)|.\\   \    |)__/  \\__/(:   \___/
#  \/    |    \\  \/. ./  \/    |  |: \.   \\  |   \\_ /    \___  \
#  // ___)_    \.    //   // ___)_ |.  \    \. |   |.  |     __/  \\
# (:      "|    \\   /   (:      "||    \    \ |   \:  |    /" \   :)
#  \_______)     \__/     \_______) \___|\____\)    \__|   (_______/

type Swap @entity {
  id: ID!
  # tokens...
  user: String!
  pool: String!
  tokenIn: String!
  tokenOut: String!
  inAmount: BigInt!
  outAmount: BigInt!

  timestamp: BigInt!
  txHash: String!
}

type SwapStrict @entity {
  id: ID!
  user: String!
  inputIndex: Int!
  outputIndex: Int!
  outputAmount: BigInt!
  inputMax: BigInt!
  actualInput: BigInt!
  timestamp: BigInt!
  txHash: String!
}

type LiquidityDeposit @entity {
  id: ID!
  asset: String!
  user: String!
  pool: String!
  amount: BigInt!
  shareAmount: BigInt!
  timestamp: BigInt!
  txHash: String!
}

type LiquidityWithdrawal @entity {
  id: ID!
  asset: String!
  user: String!
  pool: String!
  amount: BigInt!
  shareAmount: BigInt!
  timestamp: BigInt!
  txHash: String!
}

type Claim @entity {
  id: ID!
  user: String!
  rewardAmount: BigInt!
  feeAmount: BigInt!
  timestamp: BigInt!
  txHash: String!
}

# Fee Collector



# IF

type InsuranceFundStake @entity {
  id: ID!
  user: String!
  action: String!
  amount: BigInt!
  insuranceVaultAmountBefore: BigInt!
  ifSharesBefore: BigInt!
  totalIfSharesBefore: BigInt!
  ifSharesAfter: BigInt!
  totalIfSharesAfter: BigInt!
  timestamp: BigInt!
  txHash: String!
}

# Buffer

type BufferDeposit @entity {
  id: ID!
  user: String!
  token: String!
  amount: BigInt!
  timestamp: BigInt!
  txHash: String!
}

type BufferSync @entity {
  id: ID!
  user: String!
  token: String!
  timestamp: BigInt!
  txHash: String!
}

type BufferSkim @entity {
  id: ID!
  user: String!
  token: String!
  amount: BigInt!
  timestamp: BigInt!
  txHash: String!
}

type BufferWithdrawSurplus @entity {
  id: ID!
  user: String!
  token: String!
  amount: BigInt!
  timestamp: BigInt!
  txHash: String!
}

type BufferResolveDeficit @entity {
  id: ID!
  user: String!
  token: String!
  amount: BigInt!
  timestamp: BigInt!
  txHash: String!
}
